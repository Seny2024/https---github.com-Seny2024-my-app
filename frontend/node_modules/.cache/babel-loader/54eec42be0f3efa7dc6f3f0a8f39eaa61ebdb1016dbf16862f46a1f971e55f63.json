{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitie\\\\Documents\\\\BUREAU\\\\UNIVERSITE EUROMED FES\\\\EIDIA-Big Data-2A\\\\D\\xE9veloppement SAAS\\\\my-app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport authService from '../services/authService';\n\n// Création du contexte d'authentification\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personnalisé pour utiliser le contexte d'authentification\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider du contexte d'authentification\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Effet pour récupérer l'utilisateur actuellement authentifié\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const data = await authService.getUser();\n        if (data) {\n          setUser(data);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Error fetching user:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchUser();\n  }, []);\n\n  // Fonction de connexion de l'utilisateur\n  const login = async (email, motDePasse) => {\n    const data = await authService.login(email, motDePasse);\n    if (data) {\n      const userData = await authService.getUser(); // Récupération de l'utilisateur après la connexion\n      setUser(userData);\n      setIsAuthenticated(true);\n    }\n  };\n\n  // Fonction de déconnexion de l'utilisateur\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Fonction d'inscription de l'utilisateur\n  const register = async (nom, email, motDePasse, role) => {\n    const data = await authService.register(nom, email, motDePasse, role);\n    if (data) {\n      const userData = await authService.getUser(); // Récupération de l'utilisateur après l'inscription\n      setUser(userData);\n      setIsAuthenticated(true);\n    }\n  };\n\n  // Valeur fournie par le contexte d'authentification\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthContextProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthContextProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","fetchUser","data","getUser","error","console","login","email","motDePasse","userData","logout","register","nom","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nitie/Documents/BUREAU/UNIVERSITE EUROMED FES/EIDIA-Big Data-2A/Développement SAAS/my-app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport authService from '../services/authService';\r\n\r\n// Création du contexte d'authentification\r\nconst AuthContext = createContext();\r\n\r\n// Hook personnalisé pour utiliser le contexte d'authentification\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// Provider du contexte d'authentification\r\nconst AuthContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Effet pour récupérer l'utilisateur actuellement authentifié\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const data = await authService.getUser();\r\n        if (data) {\r\n          setUser(data);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []);\r\n\r\n  // Fonction de connexion de l'utilisateur\r\n  const login = async (email, motDePasse) => {\r\n    const data = await authService.login(email, motDePasse);\r\n    if (data) {\r\n      const userData = await authService.getUser(); // Récupération de l'utilisateur après la connexion\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n    }\r\n  };\r\n\r\n  // Fonction de déconnexion de l'utilisateur\r\n  const logout = () => {\r\n    authService.logout();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Fonction d'inscription de l'utilisateur\r\n  const register = async (nom, email, motDePasse, role) => {\r\n    const data = await authService.register(nom, email, motDePasse, role);\r\n    if (data) {\r\n      const userData = await authService.getUser(); // Récupération de l'utilisateur après l'inscription\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n    }\r\n  };\r\n\r\n  // Valeur fournie par le contexte d'authentification\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; \r\nexport { AuthContextProvider };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}