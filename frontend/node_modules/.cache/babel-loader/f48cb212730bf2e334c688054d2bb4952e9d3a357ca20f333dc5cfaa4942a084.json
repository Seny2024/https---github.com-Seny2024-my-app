{"ast":null,"code":"import axios from 'axios';\nimport bcrypt from 'bcrypt'; // Importez bcrypt pour le hachage du mot de passe\n\nconst API_URL = 'http://localhost:3000/api/users/';\nconst register = async (nom, email, motDePasse, role) => {\n  const hashedPassword = await bcrypt.hash(motDePasse, 10); // Hash du mot de passe\n  const response = await axios.post(`${API_URL}register`, {\n    nom,\n    email,\n    motDePasse: hashedPassword,\n    // Utilisation du mot de passe haché\n    role\n  });\n  if (response.data.token) {\n    localStorage.setItem('token', response.data.token);\n    console.log('Token stored after register:', response.data.token);\n  }\n  return response.data;\n};\nconst login = async (email, motDePasse) => {\n  const response = await axios.post(`${API_URL}login`, {\n    email,\n    motDePasse\n  });\n  if (response.data.token) {\n    localStorage.setItem('token', response.data.token);\n    console.log('Token stored after login:', response.data.token);\n  }\n  return response.data;\n};\nconst getUser = async () => {\n  const token = localStorage.getItem('token');\n  console.log('Token retrieved from localStorage:', token);\n  if (!token) return null;\n  const response = await axios.get(`${API_URL}profile`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nconst logout = () => {\n  localStorage.removeItem('token');\n  console.log('Token removed from localStorage');\n};\nconst updateProfile = async (userId, profileData) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Token not found in localStorage');\n  }\n\n  // Hasher le mot de passe si présent dans les données du profil\n  if (profileData.motDePasse) {\n    profileData.motDePasse = await bcrypt.hash(profileData.motDePasse, 10);\n  }\n  try {\n    const response = await axios.put(`${API_URL}${userId}`, profileData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erreur lors de la mise à jour du profil!', error);\n    throw error;\n  }\n};\nconst authService = {\n  register,\n  login,\n  getUser,\n  logout,\n  updateProfile // Ajout de la fonction updateProfile\n};\nexport default authService;","map":{"version":3,"names":["axios","bcrypt","API_URL","register","nom","email","motDePasse","role","hashedPassword","hash","response","post","data","token","localStorage","setItem","console","log","login","getUser","getItem","get","headers","Authorization","logout","removeItem","updateProfile","userId","profileData","Error","put","error","authService"],"sources":["C:/Users/nitie/Documents/BUREAU/UNIVERSITE EUROMED FES/EIDIA-Big Data-2A/Développement SAAS/my-app/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport bcrypt from 'bcrypt'; // Importez bcrypt pour le hachage du mot de passe\r\n\r\nconst API_URL = 'http://localhost:3000/api/users/';\r\n\r\nconst register = async (nom, email, motDePasse, role) => {\r\n  const hashedPassword = await bcrypt.hash(motDePasse, 10); // Hash du mot de passe\r\n  const response = await axios.post(`${API_URL}register`, {\r\n    nom,\r\n    email,\r\n    motDePasse: hashedPassword, // Utilisation du mot de passe haché\r\n    role,\r\n  });\r\n  if (response.data.token) {\r\n    localStorage.setItem('token', response.data.token);\r\n    console.log('Token stored after register:', response.data.token);\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst login = async (email, motDePasse) => {\r\n  const response = await axios.post(`${API_URL}login`, {\r\n    email,\r\n    motDePasse,\r\n  });\r\n  if (response.data.token) {\r\n    localStorage.setItem('token', response.data.token);\r\n    console.log('Token stored after login:', response.data.token);\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst getUser = async () => {\r\n  const token = localStorage.getItem('token');\r\n  console.log('Token retrieved from localStorage:', token);\r\n  if (!token) return null;\r\n  const response = await axios.get(`${API_URL}profile`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem('token');\r\n  console.log('Token removed from localStorage');\r\n};\r\n\r\nconst updateProfile = async (userId, profileData) => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error('Token not found in localStorage');\r\n  }\r\n\r\n  // Hasher le mot de passe si présent dans les données du profil\r\n  if (profileData.motDePasse) {\r\n    profileData.motDePasse = await bcrypt.hash(profileData.motDePasse, 10);\r\n  }\r\n  \r\n  try {\r\n    const response = await axios.put(`${API_URL}${userId}`, profileData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la mise à jour du profil!', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nconst authService = {\r\n  register,\r\n  login,\r\n  getUser,\r\n  logout,\r\n  updateProfile, // Ajout de la fonction updateProfile\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}